{"version":3,"sources":["../index.ts","../src/Client.ts","../src/managers/UserManager.ts","../src/types/enums.ts","../src/utils/URLBuilder.ts","../src/structures/ModsBitField.ts","../src/utils/AccuracyCalculator.ts","../src/structures/BaseScore.ts","../src/structures/BeatmapScore.ts","../src/structures/UserEvent.ts","../src/structures/User.ts","../src/managers/BaseManager.ts","../src/utils/toSqlDate.ts","../src/structures/Beatmapset.ts","../src/structures/Beatmap.ts","../src/managers/BeatmapManager.ts","../src/managers/ScoreManager.ts","../src/structures/Replay.ts","../src/managers/ReplayManager.ts","../src/structures/MatchScore.ts","../src/structures/MatchGame.ts","../src/structures/Match.ts","../src/managers/MatchManager.ts"],"sourcesContent":["export * from './src/Client';\n\nexport * from './src/managers/BaseManager';\nexport * from './src/managers/UserManager';\nexport * from './src/managers/BeatmapManager';\nexport * from './src/managers/ScoreManager';\nexport * from './src/managers/ReplayManager';\nexport * from './src/managers/MatchManager';\n\nexport * from './src/structures/ModsBitField';\nexport * from './src/structures/User';\nexport * from './src/structures/UserEvent';\nexport * from './src/structures/Beatmap';\nexport * from './src/structures/Beatmapset';\nexport * from './src/structures/BaseScore';\nexport * from './src/structures/BeatmapScore';\nexport * from './src/structures/MatchScore';\nexport * from './src/structures/Replay';\nexport * from './src/structures/Match';\nexport * from './src/structures/MatchGame';\n\nexport * from './src/utils/URLBuilder';\nexport * from './src/utils/AccuracyCalculator'\n\nexport * from './src/types/interfaces';\nexport * from './src/types/osuApiTypes';\nexport * from './src/types/enums';","import type { ClientOptions, OsuApiRequestOptions, RequestOptions } from './types/interfaces';\nimport request from 'superagent';\nimport { UserManager } from './managers/UserManager'\nimport { BeatmapManager } from './managers/BeatmapManager';\nimport { ScoreManager } from './managers/ScoreManager';\nimport { ReplayManager } from './managers/ReplayManager';\nimport { MatchManager } from './managers/MatchManager';\n\nexport class Client {\n    private apiKey: string;\n    public users: UserManager;\n    public beatmaps: BeatmapManager;\n    public scores: ScoreManager;\n    public replays: ReplayManager;\n    public matches: MatchManager;\n    constructor(options: ClientOptions) {\n        this.apiKey = options.apiKey;\n        this.users = new UserManager(this);\n        this.beatmaps = new BeatmapManager(this);\n        this.scores = new ScoreManager(this);\n        this.replays = new ReplayManager(this);\n        this.matches = new MatchManager(this);\n    }\n\n    public async request<T extends OsuApiRequestOptions>(options: RequestOptions<T>) {\n        if (!options?.path) throw new Error('MISSING_PATH');\n        const response = await request.get(`https://osu.ppy.sh/api/${options.path}`)\n            .query({ k: this.apiKey })\n            .query(options.queries);\n\n        return response.body;\n    }\n}","import type { APIGetUserBestRequestOptions, APIGetUserRecentRequestOptions, APIGetUserRequestOptions, FetchUserBannerOptions, GetUserBestRequestOptions, GetUserRecentRequestOptions, GetUserRequestOptions } from \"../types/interfaces\";\nimport type { APIUser, APIUserBestPerformanceScore, APIUserRecentPlayedScore } from \"../types/osuApiTypes\";\nimport request from 'superagent';\nimport { URLBuilder } from \"../utils/URLBuilder\";\nimport { BeatmapScore } from \"../structures/BeatmapScore\";\nimport { User } from \"../structures/User\";\nimport { BaseManager } from \"./BaseManager\";\n\nexport class UserManager extends BaseManager {\n    public async getUser(options: GetUserRequestOptions) {\n        const queries = {\n            u: options.user,\n            m: options.gameMode,\n            type: options.type,\n            event_days: options.eventDays\n        }\n\n        const res = await this.client.request<APIGetUserRequestOptions>({\n            path: 'get_user',\n            queries\n        }) as Array<APIUser>;\n\n        return res.map(v => new User(this.client, v));\n    }\n\n    public async fetchBanner({ id }: FetchUserBannerOptions) {\n        const context = await request.get(`https://osu.ppy.sh/users/${id}`);\n        const banner_regex = new RegExp(`https:\\\\\\\\\\\\/\\\\\\\\\\\\/assets\\\\.ppy\\\\.sh\\\\\\\\\\\\/user-profile-covers\\\\\\\\\\\\\\/${id}\\\\\\\\\\\\/(?<hash>[0-9a-z]*?)\\\\.(?<ext>.*?)&`, 'gm');\n        const banner = banner_regex.exec(context.text);\n\n        if (banner) {\n            const url = URLBuilder.banner(id, banner?.groups?.hash!, banner?.groups?.ext!);\n            return url;\n        }\n        const default_banner_regex = new RegExp('https:\\\\\\\\\\\\/\\\\\\\\\\\\/osu\\\\.ppy\\\\.sh\\\\\\\\\\\\/images\\\\\\\\\\\\/headers\\\\\\\\\\\\/profile-covers\\\\\\\\\\\\/c(?<id>\\\\d)\\\\.(?<ext>.*?)&', 'gm');\n        const defaultBanner = default_banner_regex.exec(context.text);\n        const url = URLBuilder.defaultBanner(defaultBanner?.groups?.id!, defaultBanner?.groups?.ext!);\n        return url;\n    }\n\n    public async getUserBest(options: GetUserBestRequestOptions) {\n        const queries = {\n            u: options.user,\n            m: options.mode,\n            type: options.type,\n            limit: options.limit\n        }\n\n        const res = await this.client.request<APIGetUserBestRequestOptions>({\n            path: 'get_user_best',\n            queries\n        }) as Array<APIUserBestPerformanceScore>;\n\n        return res.map(v => new BeatmapScore(this.client, v, { mode: options.mode }));\n    }\n\n    public async getUserRecent(options: GetUserRecentRequestOptions) {\n        const queries = {\n            u: options.user,\n            m: options.mode,\n            type: options.type,\n            limit: options.limit\n        }\n\n        const res = await this.client.request<APIGetUserRecentRequestOptions>({\n            path: 'get_user_recent',\n            queries\n        }) as Array<APIUserRecentPlayedScore>;\n\n        return res.map(v => new BeatmapScore(this.client, v, { mode: options.mode }));\n    }\n\n}","export enum GameMode {\n    Standard, Taiko, Catch, Mania\n}\n\nexport enum UserRequestType {\n    String = 'string', \n    Id = 'id'\n}\n\nexport const Mods = {\n    None           :0n,\n    NoFail         :1n << 0n,\n    Easy           :1n << 1n,\n    TouchDevice    :1n << 2n,\n    Hidden         :1n << 3n,\n    HardRock       :1n << 4n,\n    SuddenDeath    :1n << 5n,\n    DoubleTime     :1n << 6n,\n    Relax          :1n << 7n,\n    HalfTime       :1n << 8n,\n    Nightcore      :1n << 9n,\n    Flashlight     :1n << 10n,\n    Autoplay       :1n << 11n,\n    SpunOut        :1n << 12n,\n    AutoPilot      :1n << 13n,\n    Perfect        :1n << 14n,\n    Key4           :1n << 15n,\n    Key5           :1n << 16n,\n    Key6           :1n << 17n,\n    Key7           :1n << 18n,\n    Key8           :1n << 19n,\n    FadeIn         :1n << 20n,\n    Random         :1n << 21n,\n    Cinema         :1n << 22n,\n    Target         :1n << 23n,\n    Key9           :1n << 24n,\n    KeyCoop        :1n << 25n,\n    Key1           :1n << 26n,\n    Key3           :1n << 27n,\n    Key2           :1n << 28n,\n    ScoreV2        :1n << 29n,\n    Mirror         :1n << 30n,\n}\n\nexport const ModsAbbreviation = {\n    NoFail: 'NF',\n    Easy: 'EZ',\n    TouchDevice: 'TD',\n    Hidden: 'HD', \n    HardRock: 'HR',\n    SuddenDeath: 'SD',\n    DoubleTime: 'DT',\n    Relax: 'RX',\n    HalfTime: 'HT',\n    Nightcore: 'NC',\n    Flashlight: 'FL',\n    Autoplay: 'AT', \n    SpunOut: 'SO',\n    AutoPilot: 'AP', \n    Perfect: 'PF', \n    Key4: '4K', \n    Key5: '5K',\n    Key6: '6K',\n    Key7: '7K', \n    Key8: '8K',\n    FadeIn: 'FI',\n    Random: 'RD', \n    Cinema: 'CM',\n    Target: 'TP',\n    Key9: '9K',\n    KeyCoop: 'CP',\n    Key1: '1K', \n    Key3: '3K', \n    Key2: '2K', \n    ScoreV2: 'SV2',\n    Mirror: 'MR'\n  }\n\nexport enum BeatmapApprovedState {\n    Graveyard = -2,\n    WIP,\n    Pending,\n    Ranked,\n    Approved,\n    Qualified,\n    Loved\n}\n\nexport enum BeatmapGenre {\n    Any, Unspecified, VideoGame, Anime, Rock, Pop, Other, Novelty,\n    HipHop = 9, Electronic, Metal, Classic, Folk, Jazz\n}\n\nexport enum BeatmapLanguage {\n    Any, Unspecified, English, Japanese, Chinese,\n    Instrumental, Korean, French, German, Swedish,\n    Spanish, Italian, Russian, Polish, Other\n}\n\nexport enum ScoreRank {\n    XH, X, SH, S, A, B, C, D, F\n}\n\nexport enum MatchScoringType {\n    Score, Accuracy, Combo, ScoreV2\n}\n\nexport enum MatchTeamType {\n    HeadToHead, TagCoop, TeamVs, TagTeamVs\n}\n\nexport enum Team {\n    None, Blue, Red\n}","import { GameMode } from \"../types/enums\";\n\nexport abstract class URLBuilder {\n    private static gameModeToURLPattern(mode: GameMode) {\n        switch(mode) {\n            case GameMode.Standard: return 'osu';\n            case GameMode.Taiko: return 'taiko';\n            case GameMode.Catch: return 'fruits';\n            case GameMode.Mania: return 'mania';\n            default: throw new Error('INVALID_GAMEMODE');\n        }\n    }\n\n    public static avatar(id: string) {\n        return `https://a.ppy.sh/${id}`;\n    }\n\n    public static profile(idOrName: string) {\n        return `https://osu.ppy.sh/users/${idOrName}`;\n    }\n\n    public static banner(userId: string, hash: string, ext: string) {\n        return `https://assets.ppy.sh/user-profile-covers/${userId}/${hash}.${ext}`;\n    }\n\n    public static defaultBanner(id: string, ext: string) {\n        return `https://osu.ppy.sh/images/headers/profile-covers/c${id}.${ext}`;\n    }\n\n    public static beatmapsetURL(beatmapsetId: string) {\n        return `https://osu.ppy.sh/beatmapsets/${beatmapsetId}`;\n    }\n\n    public static beatmapURL(beatmapsetId: string, beatmapId: string, mode: GameMode) {\n        const m = URLBuilder.gameModeToURLPattern(mode);\n        return `https://osu.ppy.sh/beatmapsets/${beatmapsetId}#${m}/${beatmapId}`;\n    }\n\n    public static beatmapCoverImage(beatmapsetId: string) {\n        return `https://assets.ppy.sh/beatmaps/${beatmapsetId}/covers/cover.jpg`;\n    }\n\n    public static beatmapCoverThumbnail(beatmapsetId: string) {\n        return `https://b.ppy.sh/thumb/${beatmapsetId}l.jpg`;\n    }\n\n    public static scoreURL(mode: GameMode, scoreId: string) {\n        const m = URLBuilder.gameModeToURLPattern(mode);\n        return `https://osu.ppy.sh/scores/${m}/${scoreId}`;\n    }\n}","import { Mods } from \"../types/enums\";\n\nexport type ModsResolvable = number | string | bigint | ModsBitField | Array<ModsResolvable>;\n\nexport class ModsBitField {\n    static Flags = Mods;\n    static KeyMod = \n        Mods.Key1 | Mods.Key2 | Mods.Key3 | Mods.Key4 | Mods.Key5 |\n        Mods.Key6 | Mods.Key7 | Mods.Key8 | Mods.Key9 | Mods.KeyCoop;\n    static FreeModAllowed = \n        Mods.NoFail | Mods.Easy | Mods.Hidden | Mods.HardRock | Mods.SuddenDeath | \n        Mods.Flashlight | Mods.FadeIn | Mods.Relax | Mods.AutoPilot | Mods.SpunOut | \n        ModsBitField.KeyMod;\n    static ScoreIncreaseMods = \n        Mods.Hidden | Mods.HardRock | Mods.DoubleTime | Mods.Flashlight | Mods.FadeIn;\n\n    public bitfield: bigint;\n    constructor(bits: ModsResolvable = 0n) {\n        this.bitfield = ModsBitField.resolve(bits);\n    }\n\n    public any(bit: ModsResolvable) {\n        return (this.bitfield & ModsBitField.resolve(bit)) !== 0n;\n    }\n\n    public equals(bit: ModsResolvable) {\n        return this.bitfield === ModsBitField.resolve(bit);\n    }\n\n    public has(bit: ModsResolvable) {\n        bit = ModsBitField.resolve(bit);\n        return (this.bitfield & bit) === bit;\n    }\n\n    public add(...bits: Array<ModsResolvable>) {\n        let total: bigint = 0n;\n        for (const bit of bits) {\n            total |= ModsBitField.resolve(bit);\n        }\n        this.bitfield |= total;\n\n        return this;\n    }\n\n    public remove(...bits: ModsResolvable[]) {\n        let total: bigint = 0n;\n        for (const bit of bits) {\n            total |= ModsBitField.resolve(bit);\n        }\n        this.bitfield &= ~total;\n\n        return this;\n    }\n\n    public toArray() {\n        return Object.keys(ModsBitField.Flags).filter(bit => this.has(bit));\n    }\n\n    public serialize() {\n        const serialized: { [key: string]: boolean } = {};\n        for (const [flag, bit] of Object.entries(ModsBitField.Flags)) {\n            serialized[flag as keyof typeof ModsBitField.Flags] = this.has(bit);\n        }\n        return serialized;\n    }\n\n    public isNone() {\n        return this.bitfield === 0n;\n    }\n\n    public valueOf() {\n        return this.bitfield;\n    }\n\n    public static resolve(bit: ModsResolvable): bigint {\n        if (Array.isArray(bit)) {\n            return bit.map(ModsBitField.resolve).reduce((acc, now) => acc | now, 0n);\n        }\n        if (bit instanceof ModsBitField) {\n            return bit.bitfield;\n        }\n        if (typeof bit === 'number') return BigInt(bit);\n        if (typeof bit === 'string') {\n            if (!isNaN(+bit)) return BigInt(bit);\n            const a: bigint | undefined = ModsBitField.Flags[bit as keyof typeof ModsBitField.Flags];\n            if (typeof a === 'undefined') throw new Error('INVALID_BITFIELD');\n            return a;\n        }\n        return bit;\n    }\n}","import type { BaseScore } from '../structures/BaseScore';\nimport { GameMode } from '../types/enums';\n\nexport abstract class AccuracyCalculator {\n\n\tpublic static standard(count300: number, count100: number, count50: number, countMiss: number) {\n\t\tconst max = count300 + count100 + count50 + countMiss;\n\t\tif (!max) return 0;\n\n\t\treturn (count300 * 300 + count100 * 100 + count50 * 50) / (max * 300);\n\t}\n\n\tpublic static taiko(count300: number, count100: number, countMiss: number) {\n\t\tconst max = count300 + count100 + countMiss;\n\t\tif (!max) return 0;\n\n\t\treturn (count300 + count100 * 0.5) / max;\n\t}\n\n\tpublic static catch(count300: number, count100: number, count50: number, countKatu: number, countMiss: number) {\n\t\tconst max = count300 + count100 + count50 + countKatu + countMiss;\n\t\tif (!max) return 0;\n\n\t\treturn (count300 + count100 + count50) / max\n\t}\n\n\tpublic static mania(count300: number, count100: number, count50: number, countKatu: number, countGeki: number, countMiss: number) {\n\t\tconst max = count300 + count100 + count50 + countKatu + countGeki + countMiss;\n\t\tif (!max) return 0;\n\n\t\treturn (300 * countGeki + 300 * count300 + 200 * countKatu + 100 * count100 + 50 * count50) / (max * 300);\n\t}\n\n\tpublic static maniaV2(count300: number, count100: number, count50: number, countKatu: number, countGeki: number, countMiss: number) {\n\t\tconst max = count300 + count100 + count50 + countKatu + countGeki + countMiss;\n\t\tif (!max) return 0;\n\n\t\treturn (305 * countGeki + 300 * count300 + 200 * countKatu + 100 * count100 + 50 * count50) / (max * 305);\n\t}\n\n\tpublic static calculate(score: BaseScore, v2: boolean = false) {\n\t\tconst { statistics } = score;\n\t\tswitch(score.mode) {\n\t\t\tcase GameMode.Standard:\n\t\t\t\treturn AccuracyCalculator.standard(\n\t\t\t\t\t\tstatistics.count300, \n\t\t\t\t\t\tstatistics.count100, \n\t\t\t\t\t\tstatistics.count50,\n\t\t\t\t\t\tstatistics.countMiss\n\t\t\t\t\t);\n\t\t\tcase GameMode.Taiko:\n\t\t\t\treturn AccuracyCalculator.taiko(\n\t\t\t\t\t\tstatistics.count300, \n\t\t\t\t\t\tstatistics.count100,\n\t\t\t\t\t\tstatistics.countMiss\n\t\t\t\t\t);\n\t\t\tcase GameMode.Catch:\n\t\t\t\treturn AccuracyCalculator.catch(\n\t\t\t\t\t\tstatistics.count300, \n\t\t\t\t\t\tstatistics.count100, \n\t\t\t\t\t\tstatistics.count50,\n\t\t\t\t\t\tstatistics.countKatu,\n\t\t\t\t\t\tstatistics.countMiss\n\t\t\t\t\t);\n\t\t\tcase GameMode.Mania:\n\t\t\t\treturn v2 ?\n\t\t\t\t\tAccuracyCalculator.maniaV2(\n\t\t\t\t\t\tstatistics.count300, \n\t\t\t\t\t\tstatistics.count100, \n\t\t\t\t\t\tstatistics.count50,\n\t\t\t\t\t\tstatistics.countKatu,\n\t\t\t\t\t\tstatistics.countGeki,\n\t\t\t\t\t\tstatistics.countMiss\n\t\t\t\t\t) : \n\t\t\t\t\tAccuracyCalculator.mania(\n\t\t\t\t\t\tstatistics.count300, \n\t\t\t\t\t\tstatistics.count100, \n\t\t\t\t\t\tstatistics.count50,\n\t\t\t\t\t\tstatistics.countKatu,\n\t\t\t\t\t\tstatistics.countGeki,\n\t\t\t\t\t\tstatistics.countMiss\n\t\t\t\t\t);\n\t\t}\n\t}\n}","import type { Client } from \"../Client\";\nimport type { APIBasicScore, APIBeatmapScore, APIMatchScore, APIUserBestPerformanceScore, APIUserRecentPlayedScore } from \"../types/osuApiTypes\";\nimport type { BeatmapScoreOtherInfo, GetUserRequestOptions, ScoreStatistics } from \"../types/interfaces\";\nimport type { User } from \"./User\";\nimport { GameMode, ScoreRank, UserRequestType } from \"../types/enums\";\nimport { ModsBitField } from \"./ModsBitField\";\nimport { AccuracyCalculator } from \"../utils/AccuracyCalculator\";\n\nexport type APIScore = \n    APIBasicScore |\n    APIUserRecentPlayedScore |\n    APIUserBestPerformanceScore | \n    APIBeatmapScore |\n    APIMatchScore;\n\nexport abstract class BaseScore {\n    public readonly client: Client;\n    public readonly score: number;\n    public readonly maxCombo: number;\n    public readonly statistics: ScoreStatistics;\n    public readonly perfect: boolean;\n    public readonly enabledMods: ModsBitField;\n    public readonly userId: string;\n    public readonly rank: ScoreRank;\n    public readonly mode: GameMode;\n    public readonly beatmapId: string;\n    public readonly accuracy: number;\n    constructor(client: Client, data: APIScore, other: BeatmapScoreOtherInfo) {\n        this.client = client;\n        this.score = +data.score;\n        this.maxCombo = +data.maxcombo;\n        this.statistics = {\n            count50: +data.count50,\n            count100: +data.count100,\n            count300: +data.count300,\n            countMiss: +data.countmiss,\n            countKatu: +data.countkatu,\n            countGeki: +data.countgeki\n        }\n        this.perfect = !!+data.perfect;\n        this.enabledMods = new ModsBitField(data.enabled_mods);\n        this.userId = data.user_id;\n        this.rank = ScoreRank[data.rank];\n        this.mode = other.mode ?? GameMode.Standard;\n\n        if ('beatmap_id' in data) {\n            this.beatmapId = data.beatmap_id;\n        } else {\n            this.beatmapId = other.mapId!;\n        }\n\n        this.accuracy = AccuracyCalculator.calculate(this);\n    }\n\n    public async getPlayer(options: Omit<GetUserRequestOptions, \"user\" | \"type\"> = {}): Promise<User | undefined> {\n        const candidates = await this.client.users.getUser({\n            user: this.userId,\n            type: UserRequestType.Id,\n            ...options\n        });\n\n        return candidates[0];\n    }\n\n    public async getBeatmap() {\n        const candidates = await this.client.beatmaps.getBeatmaps({\n            beatmapId: this.beatmapId,\n            mode: this.mode,\n        });\n\n        return candidates[0];\n    }\n\n    public getReplay() {\n        return this.client.replays.getReplay({\n            beatmapId: this.beatmapId,\n            user: this.userId,\n            type: UserRequestType.Id\n        })\n    }\n}","import type { Client } from \"../Client\";\nimport type { BeatmapScoreOtherInfo } from \"../types/interfaces\";\nimport type { APIBeatmapScore, APIUserBestPerformanceScore, APIUserRecentPlayedScore } from \"../types/osuApiTypes\";\nimport { URLBuilder } from \"../utils/URLBuilder\";\nimport { BaseScore } from \"./BaseScore\";\n\nexport class BeatmapScore extends BaseScore {\n    public readonly date: Date;\n    public readonly scoreId: string | null = null;\n    public readonly username: string | null = null;\n    public readonly pp: number | null = null;\n    public readonly replayAvailable: boolean | null = null;\n\n    constructor(client: Client, data: APIBeatmapScore, other: BeatmapScoreOtherInfo);\n    constructor(client: Client, data: APIUserBestPerformanceScore, other: BeatmapScoreOtherInfo);\n    constructor(client: Client, data: APIUserRecentPlayedScore, other: BeatmapScoreOtherInfo);\n\n    constructor(\n        client: Client, \n        data: APIBeatmapScore | APIUserBestPerformanceScore | APIUserRecentPlayedScore, \n        other: BeatmapScoreOtherInfo\n    ) {\n        super(client, data, other);\n\n        this.date = new Date(data.date);\n        \n        if ('score_id' in data) {\n            this.scoreId = data.score_id;\n        }\n\n        if ('username' in data) {\n            this.username = data.username;\n        }\n\n        if ('pp' in data) {\n            this.pp = +data.pp;\n        }\n\n        if ('replay_available' in data) {\n            this.replayAvailable = !!+data.replay_available;\n        }\n    }\n\n    public scoreURL() {\n        if (!this.scoreId) return null;\n        return URLBuilder.scoreURL(this.mode, this.scoreId);\n    }\n\n}","import type { User } from './User';\nimport type { APIUserEvent } from \"../types/osuApiTypes\";\nimport type { Beatmap } from './Beatmap';\n\nexport class UserEvent {\n    public readonly user: User;\n    public readonly displayHtml: string;\n    public readonly beatmapId: string;\n    public readonly beatmapsetId: string;\n    public readonly date: Date;\n    public readonly epicfactor: number;\n    constructor(user: User, data: APIUserEvent) {\n        this.user = user;\n        this.displayHtml = data.display_html;\n        this.beatmapId = data.beatmap_id;\n        this.beatmapsetId = data.beatmapset_id;\n        this.date = new Date(data.date);\n        this.epicfactor = +data.epicfactor;\n    }\n\n    public async getBeatmap(): Promise<Beatmap | undefined> {\n        const candidates = await this.user.client.beatmaps.getBeatmaps({\n            beatmapId: this.beatmapId,\n            beatmapsetId: this.beatmapsetId,\n        });\n\n        return candidates[0];\n    }\n\n    public async getBeatmapset() {\n        const beatmap = await this.getBeatmap();\n        return beatmap?.getBeatmapset();\n    }\n}","import type { UserScoreRankCount, GetUserBestRequestOptions, GetUserRecentRequestOptions } from \"../types/interfaces\";\nimport type { APIUser } from \"../types/osuApiTypes\";\nimport type { Client } from \"../Client\";\nimport { UserEvent } from \"./UserEvent\";\nimport { URLBuilder } from \"../utils/URLBuilder\";\nimport { UserRequestType } from \"../types/enums\";\n\nexport class User {\n    public readonly client: Client;\n\n    // User Data\n    public readonly id: string;\n    public readonly username: string;\n    public readonly joinDate: Date;\n    public readonly playcount: number;\n    public readonly level: number;\n    public readonly country: string;\n    public readonly playtime: number;\n    public readonly events: Array<UserEvent>;\n    public banner: string | null;\n\n    // User Score\n    public readonly count300: number;\n    public readonly count100: number;\n    public readonly count50: number;\n    public readonly rankedScore: number;\n    public readonly totalScore: number;\n    public readonly rank: number;\n    public readonly countryRank: number;\n    public readonly pp: number;\n    public readonly accuracy: number;\n    public readonly scoreRankCount: UserScoreRankCount;\n\n    constructor(client: Client, data: APIUser) {\n        this.client = client;\n        this.id = data.user_id;\n        this.username = data.username;\n        this.joinDate = new Date(data.join_date);\n        this.count300 = +data.count300;\n        this.count100 = +data.count100;\n        this.count50 = +data.count50;\n        this.playcount = +data.playcount;\n        this.playtime = +data.total_seconds_played;\n        this.rankedScore = +data.ranked_score;\n        this.totalScore = +data.total_score;\n        this.rank = +data.pp_rank;\n        this.level = +data.level;\n        this.pp = +data.pp_raw;\n        this.accuracy = +data.accuracy;\n        this.scoreRankCount = {\n            ss: +data.count_rank_ss,\n            ssh: +data.count_rank_ssh,\n            s: +data.count_rank_s,\n            sh: +data.count_rank_sh,\n            a: +data.count_rank_a\n        };\n        this.country = data.country;\n        this.countryRank = +data.pp_country_rank;\n        this.events = data.events.map(v => new UserEvent(this, v));\n\n        this.banner = null;\n    }\n\n    public avatarURL() {\n        return URLBuilder.avatar(this.id);\n    }\n\n    public profileURL() {\n        return URLBuilder.profile(this.id);\n    }\n\n    public async fetchBanner(force: boolean = false) {\n        if (!force && this.banner) return this.banner;\n        const url = await this.client.users.fetchBanner({ id: this.id });\n        return this.banner = url;\n    }\n\n    public getBest(options: Omit<GetUserBestRequestOptions, \"user\" | \"type\"> = {}) {\n        return this.client.users.getUserBest({\n            user: this.id,\n            type: UserRequestType.Id,\n            ...options\n        });\n\n    }\n\n    public getRecent(options: Omit<GetUserRecentRequestOptions, \"user\" | \"type\"> = {}) {\n        return this.client.users.getUserRecent({\n            user: this.id,\n            type: UserRequestType.Id,\n            ...options\n        });\n    }\n}","import type { Client } from \"../Client\";\n\nexport abstract class BaseManager {\n    public readonly client: Client;\n    constructor(client: Client) {\n        this.client = client;\n    }\n}","export function toSqlDate(date: Date) {\n    return date.toISOString().slice(0, 19).replace('T', ' ');\n}","import type { Client } from '../Client';\nimport type { BeatmapApprovedState, BeatmapGenre, BeatmapLanguage } from '../types/enums';\nimport type { Beatmap } from './Beatmap';\nimport type { User } from './User';\nimport { UserRequestType } from '../types/enums';\nimport { URLBuilder } from '../utils/URLBuilder';\n\nexport class Beatmapset {\n    public readonly client: Client;\n    public readonly beatmaps: Array<Beatmap>;\n    public readonly id: string;\n    public readonly approvedState: BeatmapApprovedState;\n    public readonly length: number;\n    public readonly submitDate: Date;\n    public readonly approvedDate: Date | null;\n    public readonly lastUpdate: Date;\n    public readonly artist: string;\n    public readonly title: string;\n    public readonly creator: string;\n    public readonly creatorId: string;\n    public readonly source: string;\n    public readonly tags: string[];\n    public readonly genre: BeatmapGenre;\n    public readonly language: BeatmapLanguage;\n    public readonly favoriteCount: number;\n    public readonly rating: number;\n    public readonly downloadUnavailable: boolean;\n    public readonly audioUnavailable: boolean;\n    constructor(client: Client, data: Beatmap, maps: Array<Beatmap>) {\n        this.client = client;\n        this.beatmaps = maps;\n        this.id = data.beatmapsetId;\n        this.approvedState = data.approvedState;\n        this.length = data.totalLength;\n        this.submitDate = data.submitDate;\n        this.approvedDate = data.approvedDate;\n        this.lastUpdate = data.lastUpdate;\n        this.artist = data.artist;\n        this.title = data.title;\n        this.creator = data.creator;\n        this.creatorId = data.creatorId;\n        this.source = data.source;\n        this.tags = data.tags.slice();\n        this.genre = data.genre;\n        this.language = data.language;\n        this.favoriteCount = data.favoriteCount;\n        this.rating = data.rating;\n        this.downloadUnavailable = data.downloadUnavailable;\n        this.audioUnavailable = data.audioUnavailable;\n    }\n\n    public beatmapsetURL() {\n        return URLBuilder.beatmapsetURL(this.id);\n    }\n    \n    public coverImageURL() {\n        return URLBuilder.beatmapCoverImage(this.id);\n    }\n    \n    public coverThumbnailURL() {\n        return URLBuilder.beatmapCoverThumbnail(this.id);\n    }\n    \n    public async getCreator(): Promise<User | undefined> {\n        const candidates = await this.client.users.getUser({\n            user: this.creatorId,\n            type: UserRequestType.Id\n        });\n\n        return candidates[0];\n    }\n}","import type { Client } from \"../Client\";\nimport type { BeatmapDiffculty, BeatmapObjectCount } from \"../types/interfaces\";\nimport type { APIBeatmap } from \"../types/osuApiTypes\";\nimport type { User } from \"./User\";\nimport { BeatmapApprovedState, BeatmapGenre, BeatmapLanguage, GameMode, UserRequestType } from \"../types/enums\";\nimport { URLBuilder } from \"../utils/URLBuilder\";\nimport { Beatmapset } from \"./Beatmapset\";\n\nexport class Beatmap {\n    public readonly id: string;\n    public readonly beatmapsetId: string;\n    public readonly approvedState: BeatmapApprovedState;\n    public readonly totalLength: number;\n    public readonly hitLength: number;\n    public readonly diffcultyName: string;\n    public readonly hash: string;\n    public readonly difficulty: BeatmapDiffculty;\n    public readonly mode: GameMode;\n    public readonly objectCount: BeatmapObjectCount;\n    public readonly submitDate: Date;\n    public readonly approvedDate: Date | null;\n    public readonly lastUpdate: Date;\n    public readonly artist: string;\n    public readonly title: string;\n    public readonly creator: string;\n    public readonly creatorId: string;\n    public readonly bpm: number;\n    public readonly source: string;\n    public readonly tags: string[];\n    public readonly genre: BeatmapGenre;\n    public readonly language: BeatmapLanguage;\n    public readonly favoriteCount: number;\n    public readonly rating: number;\n    public readonly downloadUnavailable: boolean;\n    public readonly audioUnavailable: boolean;\n    public readonly playcount: number;\n    public readonly passcount: number;\n    public readonly maxCombo: number | null;\n    constructor(public readonly client: Client, data: APIBeatmap) {\n        this.id = data.beatmap_id;\n        this.beatmapsetId = data.beatmapset_id;\n        this.approvedState = +data.approved;\n        this.totalLength = +data.total_length;\n        this.hitLength = +data.hit_length;\n        this.diffcultyName = data.version;\n        this.hash = data.file_md5;\n        this.difficulty = {\n            ApproachRate: +data.diff_approach,\n            CircleSize: +data.diff_size,\n            OverallDifficulty: +data.diff_overall,\n            HPDrainRate: +data.diff_drain,\n            aim: +(data.diff_aim ?? 0),\n            speed: +(data.diff_speed ?? 0),\n            rating: +(data.difficultyrating ?? 0)\n        }\n        this.mode = +data.mode;\n        this.objectCount = {\n            circle: +data.count_normal,\n            slider: +data.count_slider,\n            spinner: +data.count_spinner\n        }\n        this.submitDate = new Date(data.submit_date);\n        if (!data.approved_date) {\n            this.approvedDate = null;\n        } else {\n            this.approvedDate = new Date(data.approved_date);\n        }\n        this.lastUpdate = new Date(data.last_update);\n        this.artist = data.artist;\n        this.title = data.title;\n        this.creator = data.creator;\n        this.creatorId = data.creator_id;\n        this.bpm = +data.bpm;\n        this.source = data.source;\n        this.tags = data.tags.split(' ');\n        this.genre = +data.genre_id;\n        this.language = +data.language_id;\n        this.favoriteCount = +data.favourite_count;\n        this.rating = +data.rating;\n        this.downloadUnavailable = !!+data.download_unavailable;\n        this.audioUnavailable = !!+data.audio_unavailable;\n        this.playcount = +data.playcount;\n        this.passcount = +data.passcount;\n        if (data.max_combo) {\n            this.maxCombo = +data.max_combo;\n        } else {\n            this.maxCombo = null;\n        }\n    }\n\n    public beatmapsetURL() {\n        return URLBuilder.beatmapsetURL(this.beatmapsetId);\n    }\n\n    public beatmapURL() {\n        return URLBuilder.beatmapURL(this.beatmapsetId, this.id, this.mode);\n    }\n    \n    public coverImageURL() {\n        return URLBuilder.beatmapCoverImage(this.beatmapsetId);\n    }\n    \n    public coverThumbnailURL() {\n        return URLBuilder.beatmapCoverThumbnail(this.beatmapsetId);\n    }\n    \n    public async getCreator(): Promise<User | undefined> {\n        const candidates = await this.client.users.getUser({\n            user: this.creatorId,\n            type: UserRequestType.Id\n        });\n\n        return candidates[0];\n    }\n\n    public async getBeatmapset() {\n        const set = await this.client.beatmaps.getBeatmaps({\n            beatmapsetId: this.beatmapsetId\n        });\n        \n        return new Beatmapset(this.client, this, set);\n    }\n\n}","import type { APIGetBeatmapsRequestOptions, GetBeatmapsRequestOptions } from \"../types/interfaces\";\nimport type { APIBeatmap } from \"../types/osuApiTypes\";\nimport { toSqlDate } from '../utils/toSqlDate';\nimport { ModsBitField } from \"../structures/ModsBitField\";\nimport { Beatmap } from \"../structures/Beatmap\";\nimport { BaseManager } from \"./BaseManager\";\n\nexport class BeatmapManager extends BaseManager {\n    public async getBeatmaps(options: GetBeatmapsRequestOptions = {}) {\n        const queries = {\n            since: options.since && toSqlDate(options.since),\n            s: options.beatmapsetId,\n            b: options.beatmapId,\n            u: options.user,\n            type: options.type,\n            m: options.mode,\n            a: options.showConverted,\n            h: options.hash,\n            limit: options.limit,\n            mods: ModsBitField.resolve(options.mods ?? 0)\n        }\n\n        const res = await this.client.request<APIGetBeatmapsRequestOptions>({\n            path: 'get_beatmaps',\n            queries\n        }) as Array<APIBeatmap>;\n\n        return res.map(v => new Beatmap(this.client, v));\n    }\n}","import type { APIGetScoresRequestOptions, GetScoreRequestOptions } from \"../types/interfaces\";\nimport type { APIBeatmapScore } from \"../types/osuApiTypes\";\nimport { ModsBitField } from \"../structures/ModsBitField\";\nimport { BeatmapScore } from \"../structures/BeatmapScore\";\nimport { BaseManager } from \"./BaseManager\";\n\nexport class ScoreManager extends BaseManager {\n    public async getScores(options: GetScoreRequestOptions) {\n        const mods = options.mods == undefined \n            ? undefined : ModsBitField.resolve(options.mods);\n        const queries = {\n            b: options.beatmapId,\n            u: options.user,\n            m: options.mode,\n            mods: mods,\n            type: options.type,\n            limit: options.limit\n        }\n\n        const res = await this.client.request<APIGetScoresRequestOptions>({\n            path: 'get_scores',\n            queries\n        }) as Array<APIBeatmapScore>;\n\n        return res.map(v => new BeatmapScore(this.client, v, { mapId: options.beatmapId, mode: options.mode }));\n    }\n}","import type { Client } from \"../Client\";\nimport type { APIReplay } from \"../types/osuApiTypes\";\nimport { Buffer } from 'node:buffer'\n\nexport class Replay {\n    public readonly client: Client;\n    public readonly content: string;\n    public readonly stream: Buffer;\n    constructor(client: Client, data: APIReplay) {\n        this.client = client;\n        this.content = data.content;\n        this.stream = Buffer.from(this.content, 'base64');\n    }\n}","import type { APIGetReplayRequestOptions, GetReplayRequestOptions } from \"../types/interfaces\";\nimport type { APIReplay } from \"../types/osuApiTypes\";\nimport { ModsBitField } from \"../structures/ModsBitField\";\nimport { Replay } from \"../structures/Replay\";\nimport { BaseManager } from \"./BaseManager\";\n\nexport class ReplayManager extends BaseManager {\n    public async getReplay(options: GetReplayRequestOptions) {\n        if ((!options.beatmapId || !options.user) && !options.scoreId) {\n            throw new Error('You should provide either beatmapId and user or scordId to get replay')\n        }\n        const mods = options.mods == undefined \n            ? undefined : ModsBitField.resolve(options.mods);\n        const queries = {\n            b: options.beatmapId,\n            u: options.user,\n            m: options.mode,\n            s: options.scoreId,\n            type: options.type,\n            mods: mods\n        }\n\n        const res = await this.client.request<APIGetReplayRequestOptions>({\n            path: 'get_replay',\n            queries\n        }) as APIReplay;\n\n        return new Replay(this.client, res);\n    }\n}","import type { Client } from \"../Client\";\nimport type { Team } from \"../types/enums\";\nimport type { BeatmapScoreOtherInfo } from \"../types/interfaces\";\nimport type { APIMatchScore } from \"../types/osuApiTypes\";\nimport { BaseScore } from \"./BaseScore\";\n\nexport class MatchScore extends BaseScore {\n    public readonly slot: number;\n    public readonly team: Team;\n    public readonly pass: boolean;\n    constructor(client: Client, data: APIMatchScore, other: BeatmapScoreOtherInfo) {\n        super(client, data, other);\n        this.slot = +data.slot;\n        this.team = +data.team;\n        this.pass = !!+data.pass;\n    }\n}","import type { Client } from \"../Client\";\nimport type { GameMode, MatchScoringType, Team } from \"../types/enums\";\nimport type { APIMatchGameData } from \"../types/osuApiTypes\";\nimport type { Beatmap } from \"./Beatmap\";\nimport type { Match } from \"./Match\";\nimport { MatchScore } from \"./MatchScore\";\nimport { ModsBitField } from \"./ModsBitField\";\n\nexport class MatchGame {\n    public readonly client: Client;\n    public readonly match: Match;\n    public readonly id: string;\n    public readonly startAt: Date;\n    public readonly endAt: Date;\n    public readonly beatmapId: string;\n    public readonly mode: GameMode;\n    public readonly matchType: number;\n    public readonly scoringType: MatchScoringType;\n    public readonly teamType: Team;\n    public readonly mods: ModsBitField;\n    public readonly scores: Array<MatchScore>;\n    constructor(match: Match, data: APIMatchGameData) {\n        this.client = match.client;\n        this.match = match;\n        this.id = data.game_id;\n        this.startAt = new Date(data.start_time);\n        this.endAt = new Date(data.end_time);\n        this.beatmapId = data.beatmap_id;\n        this.mode = +data.play_mode;\n        this.matchType = +data.match_type;\n        this.scoringType = +data.scoring_type;\n        this.teamType = +data.team_type;\n        this.mods = new ModsBitField(data.mods);\n        this.scores = data.scores.map(score => new MatchScore(this.client, score, {\n            mode: +data.play_mode,\n            mapId: data.beatmap_id\n        }));\n    }\n\n    public async getBeatmap(): Promise<Beatmap | undefined> {\n        const candidates = await this.client.beatmaps.getBeatmaps({\n            beatmapId: this.beatmapId\n        });\n        return candidates[0];\n    }\n}","import type { APIMatch } from \"../types/osuApiTypes\";\nimport type { Client } from \"../Client\";\nimport { MatchGame } from \"./MatchGame\";\n\nexport class Match {\n    public readonly client: Client;\n    public readonly id: string;\n    public readonly name: string;\n    public readonly startAt: Date;\n    public readonly endAt: Date | null;\n    public readonly games: Array<MatchGame>\n    constructor(client: Client, data: APIMatch) {\n        this.client = client;\n\n        const { match, games } = data;\n        this.id = match.match_id;\n        this.name = match.name;\n        this.startAt = new Date(match.start_time);\n        if (match.end_time) {\n            this.endAt = new Date(match.end_time);\n        } else {\n            this.endAt = null;\n        }\n\n        this.games = games.map(data => new MatchGame(this, data));\n\n    }\n}","import { BaseManager } from \"./BaseManager\";\nimport type { GetMatchRequestOptions } from \"../types/interfaces\";\nimport type { APIMatch, APIMatchNotFound } from \"../types/osuApiTypes\";\nimport { Match } from \"../structures/Match\";\n\nexport class MatchManager extends BaseManager {\n    public async getMatch(options: GetMatchRequestOptions) {\n        const queries = {\n            mp: options.matchId\n        }\n        const res = await this.client.request({\n            path: 'get_match',\n            queries\n        }) as APIMatch | APIMatchNotFound;\n\n        if (res.match === 0) { return null; }\n        return new Match(this.client, res);\n    }\n}"],"mappings":"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","names":["import_superagent","GameMode","UserRequestType","BeatmapApprovedState","BeatmapGenre","BeatmapLanguage","ScoreRank","MatchScoringType","MatchTeamType","Team","request","url","data","request"]}