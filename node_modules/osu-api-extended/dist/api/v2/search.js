"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.search_all = void 0;
const enums_1 = require("../../types/enums");
const handleErrors_1 = require("../../utility/handleErrors");
const request_1 = require("../../utility/request");
const search_all = (params, addons) => __awaiter(void 0, void 0, void 0, function* () {
    const object = {};
    let url = 'https://osu.ppy.sh/api/v2';
    switch (params === null || params === void 0 ? void 0 : params.type) {
        case 'site':
            url += '/search';
            if ((params === null || params === void 0 ? void 0 : params.location) != null)
                object.mode = params.location;
            if ((params === null || params === void 0 ? void 0 : params.query) != null)
                object.query = params.query;
            if ((params === null || params === void 0 ? void 0 : params.page) != null)
                object.page = params.page;
            break;
        case 'beatmaps':
            url += '/beatmapsets/search';
            if ((params === null || params === void 0 ? void 0 : params._played) != null)
                object.played = params._played ? 'played' : 'unplayed';
            if ((params === null || params === void 0 ? void 0 : params._nsfw) != null)
                object.nsfw = params._nsfw;
            if ((params === null || params === void 0 ? void 0 : params.query) != null)
                object.q = params.query;
            if ((params === null || params === void 0 ? void 0 : params.mode) != null)
                object.m = typeof params.mode == 'number' ? params.mode : enums_1.GamemodeEnum[params.mode];
            if ((params === null || params === void 0 ? void 0 : params.status) != null)
                object.s = params.status;
            if ((params === null || params === void 0 ? void 0 : params.category) != null)
                object.c = params.category.join('.');
            if ((params === null || params === void 0 ? void 0 : params.genre) != null)
                object.g = typeof params.genre == 'number' ? params.genre : enums_1.Genres_enum[params.genre];
            if ((params === null || params === void 0 ? void 0 : params.language) != null)
                object.l = typeof params.language == 'number' ? params.language : enums_1.Languages_enum[params.language];
            if ((params === null || params === void 0 ? void 0 : params.achieved_rank) != null)
                object.r = params.achieved_rank.join('.');
            if ((params === null || params === void 0 ? void 0 : params.extra) != null)
                object.e = params.extra.join('.');
            if ((params === null || params === void 0 ? void 0 : params.sort) != null)
                object.sort = params.sort;
            if ((params === null || params === void 0 ? void 0 : params.cursor_string) != null)
                object.cursor_string = params.cursor_string;
            break;
    }
    ;
    const data = yield (0, request_1.request)(url, {
        method: 'GET',
        params: object,
        addons
    });
    if (data.error)
        return (0, handleErrors_1.handleErrors)(new Error(data.error));
    return data;
});
exports.search_all = search_all;
