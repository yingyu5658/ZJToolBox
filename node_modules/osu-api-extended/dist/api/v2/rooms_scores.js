"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.rooms_scores = void 0;
const request_1 = require("../../utility/request");
const handleErrors_1 = require("../../utility/handleErrors");
const auth_1 = require("../../utility/auth");
const rooms_scores = (params, addons) => __awaiter(void 0, void 0, void 0, function* () {
    if (auth_1.credentials.type != 'lazer' && auth_1.credentials.type != 'cli') {
        return (0, handleErrors_1.handleErrors)(new Error(`Login via lazer or cli to use this endpoint`));
    }
    ;
    let object = {};
    let url = 'https://osu.ppy.sh/api/v2';
    let method = 'GET';
    if ((params === null || params === void 0 ? void 0 : params.id) == null) {
        return (0, handleErrors_1.handleErrors)(new Error(`Specify room id`));
    }
    ;
    if ((params === null || params === void 0 ? void 0 : params.playlist_id) == null) {
        return (0, handleErrors_1.handleErrors)(new Error(`Specify playlist id`));
    }
    ;
    switch (params === null || params === void 0 ? void 0 : params.type) {
        case 'all':
            url += `/rooms/${params.id}/playlist/${params.playlist_id}/scores`;
            if ((params === null || params === void 0 ? void 0 : params.limit) != null)
                object.limit = params.limit;
            if ((params === null || params === void 0 ? void 0 : params.sort) != null)
                object.sort = params.sort;
            if ((params === null || params === void 0 ? void 0 : params.cursor_string) != null)
                object.cursor_string = params.cursor_string;
            break;
        case 'single':
            url += `/rooms/${params.id}/playlist/${params.playlist_id}/scores/${params.score_id}`;
            break;
        case 'user_highest':
            url += `/rooms/${params.id}/playlist/${params.playlist_id}/scores/users/${params.user_id}`;
            break;
        default:
            return (0, handleErrors_1.handleErrors)(new Error(`Unsupported type: ${params.type}`));
    }
    ;
    const data = yield (0, request_1.request)(url, {
        method: method,
        params: object,
        addons,
    });
    if (data.error)
        return (0, handleErrors_1.handleErrors)(new Error(data.error));
    return data;
});
exports.rooms_scores = rooms_scores;
