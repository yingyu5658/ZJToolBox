"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.session_actions = void 0;
const request_1 = require("../../utility/request");
const handleErrors_1 = require("../../utility/handleErrors");
const auth_1 = require("../../utility/auth");
// FIXME?
const session_actions = (params, addons) => __awaiter(void 0, void 0, void 0, function* () {
    let url = 'https://osu.ppy.sh/api/v2';
    let method = 'POST';
    const headers = {};
    let body = '';
    switch (params === null || params === void 0 ? void 0 : params.type) {
        case 'verify':
            if (auth_1.credentials.type != 'lazer') {
                return (0, handleErrors_1.handleErrors)(new Error(`Login via lazer to use this endpoint`));
            }
            ;
            if ((params === null || params === void 0 ? void 0 : params.code) == null) {
                return (0, handleErrors_1.handleErrors)(new Error(`Specify verification code`));
            }
            ;
            url += `/session/verify`;
            const boundary = `----WebKitFormBoundary${Math.random().toString(16).substring(2)}`;
            body += `--${boundary}\r\n`;
            body += 'Content-Disposition: form-data; name="verification_key"\r\n\r\n';
            body += `${params.code}\r\n`;
            body += `--${boundary}--\r\n`;
            headers['Content-Type'] = `multipart/form-data; boundary=${boundary}`;
            headers['Content-Length'] = Buffer.byteLength(body);
            break;
        case 'reissue':
            if (auth_1.credentials.type != 'lazer') {
                return (0, handleErrors_1.handleErrors)(new Error(`Login via lazer to use this endpoint`));
            }
            ;
            url += `/session/verify/reissue`;
            break;
        case 'delete':
            url += `/oauth/tokens/current`;
            method = 'DELETE';
            break;
    }
    ;
    const data = yield (0, request_1.request)(url, {
        method: method,
        data: body,
        headers: headers,
        addons,
    });
    if (data.error)
        return (0, handleErrors_1.handleErrors)(new Error(data.error));
    return data;
});
exports.session_actions = session_actions;
