"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.beatmaps_lookup = void 0;
const enums_1 = require("../../types/enums");
const request_1 = require("../../utility/request");
const handleErrors_1 = require("../../utility/handleErrors");
const beatmaps_lookup = (params, addons) => __awaiter(void 0, void 0, void 0, function* () {
    const object = {};
    let url = 'https://osu.ppy.sh/api/v2';
    let method = 'GET';
    switch (params.type) {
        case 'difficulty':
            url += '/beatmaps/lookup';
            if (params.id == null && params.checksum == null && params.filename == null) {
                return (0, handleErrors_1.handleErrors)(new Error(`Specify at least one parameter`));
            }
            ;
            object.id = params.id;
            object.checksum = params.checksum;
            object.filename = params.filename;
            break;
        case 'set':
            url += '/beatmapsets/lookup';
            if (params.id == null) {
                return (0, handleErrors_1.handleErrors)(new Error(`Specify beatmap set id`));
            }
            ;
            object.beatmap_id = params.id;
            break;
        case 'attributes':
            url += `/beatmaps/${params.id}/attributes`;
            method = 'POST';
            if (params.id == null) {
                return (0, handleErrors_1.handleErrors)(new Error(`Specify beatmap id`));
            }
            ;
            object.mods = params.mods;
            if (typeof params.mode == 'string')
                object.ruleset = params.mode;
            else if (typeof params.mode == 'number')
                object.ruleset_id = enums_1.GamemodeEnum[params.mode];
            break;
        case 'difficulties':
            url += `/beatmaps`;
            if (Array.isArray(params.ids))
                object['ids[]'] = params.ids;
            else {
                return (0, handleErrors_1.handleErrors)(new Error(`Specify at least one beatmap id`));
            }
            ;
            break;
        default:
            return (0, handleErrors_1.handleErrors)(new Error(`Unsupported type: ${params.type}`));
    }
    ;
    const data = yield (0, request_1.request)(url, {
        method: method,
        params: object,
        addons,
    });
    if (data.error)
        return (0, handleErrors_1.handleErrors)(new Error(data.error));
    if (params.type == 'attributes')
        return data.attributes;
    if (params.type == 'difficulties')
        return data.beatmaps;
    return data;
});
exports.beatmaps_lookup = beatmaps_lookup;
