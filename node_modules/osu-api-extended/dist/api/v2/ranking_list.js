"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ranking_list = void 0;
const request_1 = require("../../utility/request");
const handleErrors_1 = require("../../utility/handleErrors");
const ranking_list = (params, addons) => __awaiter(void 0, void 0, void 0, function* () {
    if ((params === null || params === void 0 ? void 0 : params.type) != 'kudosu' && (params === null || params === void 0 ? void 0 : params.mode) == null) {
        return (0, handleErrors_1.handleErrors)(new Error('Gamemode not specified'));
    }
    ;
    let object = {};
    let url = 'https://osu.ppy.sh/api/v2';
    let method = 'GET';
    switch (params === null || params === void 0 ? void 0 : params.type) {
        case 'charts':
            url += `/rankings/${params.mode}/${params.type}`;
            if ((params === null || params === void 0 ? void 0 : params.page) != null)
                object['cursor[page]'] = params.page;
            if ((params === null || params === void 0 ? void 0 : params.filter) != null)
                object.filter = params.filter;
            if ((params === null || params === void 0 ? void 0 : params.spotlight_id) != null)
                object.spotlight = params.spotlight_id;
            break;
        case 'country':
            url += `/rankings/${params.mode}/${params.type}`;
            if ((params === null || params === void 0 ? void 0 : params.page) != null)
                object['cursor[page]'] = params.page;
            if ((params === null || params === void 0 ? void 0 : params.filter) != null)
                object.filter = params.filter;
            break;
        case 'performance':
            url += `/rankings/${params.mode}/${params.type}`;
            if ((params === null || params === void 0 ? void 0 : params.page) != null)
                object['cursor[page]'] = params.page;
            if ((params === null || params === void 0 ? void 0 : params.filter) != null)
                object.filter = params.filter;
            if ((params === null || params === void 0 ? void 0 : params.country_code) != null)
                object.country = params.country_code;
            if ((params === null || params === void 0 ? void 0 : params.variant) != null)
                object.variant = params.variant;
            break;
        case 'score':
            url += `/rankings/${params.mode}/${params.type}`;
            if ((params === null || params === void 0 ? void 0 : params.page) != null)
                object['cursor[page]'] = params.page;
            if ((params === null || params === void 0 ? void 0 : params.filter) != null)
                object.filter = params.filter;
            break;
        case 'kudosu':
            url += `/rankings/kudosu`;
            if ((params === null || params === void 0 ? void 0 : params.page) != null)
                object.page = params.page;
            break;
        default:
            return (0, handleErrors_1.handleErrors)(new Error(`Unsupported type: ${params.type}`));
    }
    ;
    const data = yield (0, request_1.request)(url, {
        method: method,
        params: object,
        addons,
    });
    if (data.error)
        return (0, handleErrors_1.handleErrors)(new Error(data.error));
    if (params.type == 'kudosu')
        return data.ranking;
    return data;
});
exports.ranking_list = ranking_list;
