"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.comments_actions = void 0;
const request_1 = require("../../utility/request");
const handleErrors_1 = require("../../utility/handleErrors");
const auth_1 = require("../../utility/auth");
const comments_actions = (params, addons) => __awaiter(void 0, void 0, void 0, function* () {
    if (auth_1.credentials.type != 'lazer') {
        return (0, handleErrors_1.handleErrors)(new Error(`Login via lazer to use this endpoint`));
    }
    ;
    const object = {};
    let url = 'https://osu.ppy.sh/api/v2';
    let method = 'POST';
    switch (params.type) {
        case 'new':
            url += `/comments`;
            if (params.id == null) {
                return (0, handleErrors_1.handleErrors)(new Error(`Specify news id or beatmap set id`));
            }
            ;
            if (params.commentable_type == null) {
                return (0, handleErrors_1.handleErrors)(new Error(`Specify commentable_type`));
            }
            ;
            if (params.message == null) {
                return (0, handleErrors_1.handleErrors)(new Error(`You forgot to provide message`));
            }
            ;
            object['comment[commentable_type]'] = params.commentable_type;
            object['comment[parent_id]'] = params.parent_id;
            object['comment[commentable_id]'] = params.id;
            object['comment[message]'] = params.message;
            break;
        case 'edit':
            if (params.id == null) {
                return (0, handleErrors_1.handleErrors)(new Error(`Specify comment id`));
            }
            ;
            if (params.message == null) {
                return (0, handleErrors_1.handleErrors)(new Error(`You forgot to provide message`));
            }
            ;
            url += `/comments/${params.id}`;
            method = 'PUT';
            object['comment[message]'] = params.message;
            break;
        case 'delete':
            if (params.id == null) {
                return (0, handleErrors_1.handleErrors)(new Error(`Specify comment id`));
            }
            ;
            url += `/comments/${params.id}`;
            method = 'DELETE';
            break;
        case 'vote':
            if (params.id == null) {
                return (0, handleErrors_1.handleErrors)(new Error(`Specify comment id`));
            }
            ;
            url += `/comments/${params.id}/vote`;
            method = 'POST';
            break;
        case 'unvote':
            if (params.id == null) {
                return (0, handleErrors_1.handleErrors)(new Error(`Specify comment id`));
            }
            ;
            url += `/comments/${params.id}/vote`;
            method = 'DELETE';
            break;
        default:
            return (0, handleErrors_1.handleErrors)(new Error(`Unsupported type: ${params.type}`));
    }
    ;
    const data = yield (0, request_1.request)(url, {
        method: method,
        params: object,
        addons,
    });
    if (data.error)
        return (0, handleErrors_1.handleErrors)(new Error(data.error));
    return data;
});
exports.comments_actions = comments_actions;
