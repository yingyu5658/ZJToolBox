"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.changelogs_list = void 0;
const handleErrors_1 = require("../../utility/handleErrors");
const request_1 = require("../../utility/request");
const changelogs_list = (params, addons) => __awaiter(void 0, void 0, void 0, function* () {
    let object = {};
    let url = 'https://osu.ppy.sh/api/v2';
    let method = 'GET';
    switch (params === null || params === void 0 ? void 0 : params.type) {
        case 'all':
            url += '/changelog';
            if ((params === null || params === void 0 ? void 0 : params.from_build) != null)
                object.from = params.from_build;
            if ((params === null || params === void 0 ? void 0 : params.to_build) != null)
                object.to = params.to_build;
            if ((params === null || params === void 0 ? void 0 : params.stream_name) != null)
                object.stream = params.stream_name;
            if ((params === null || params === void 0 ? void 0 : params.max_id) != null)
                object.max_id = params.max_id;
            if ((params === null || params === void 0 ? void 0 : params.message_formats) != null)
                object['message_formats[]'] = params.message_formats;
            break;
        case 'lookup':
            url += `/changelog/${params.changelog}`;
            if ((params === null || params === void 0 ? void 0 : params.changelog) != null == null) {
                return (0, handleErrors_1.handleErrors)(new Error(`Specify changelog stream`));
            }
            ;
            if ((params === null || params === void 0 ? void 0 : params.message_formats) != null)
                object['message_formats[]'] = params.message_formats;
            if ((params === null || params === void 0 ? void 0 : params.key) != null)
                object['key'] = params.key;
            break;
        default:
            return (0, handleErrors_1.handleErrors)(new Error(`Unsupported type: ${params === null || params === void 0 ? void 0 : params.type}`));
    }
    ;
    const data = yield (0, request_1.request)(url, {
        method: method,
        params: object,
        addons
    });
    if (data.error)
        return (0, handleErrors_1.handleErrors)(new Error(data.error));
    return data;
});
exports.changelogs_list = changelogs_list;
