"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.calculate_rank = void 0;
const enums_1 = require("../types/enums");
const handleErrors_1 = require("../utility/handleErrors");
const accuracy_1 = require("./accuracy");
const mods_1 = require("./mods");
/**
 * Calculate rank from play hits
 *
 * &nbsp;
 *
 * ### Parameters
 * - `hits.geki` or `hits.perfect` or `hits.count_geki` - Amount of geki's
 * - `hits[300]` or `hits.great` or `hits.count_300` - Amount of 300's
 * - `hits.katu` or `hits.good` or `hits.count_katu` - Amount of katu's
 * - `hits[100]` or `hits.ok` or `hits.count_100` - Amount of 100's
 * - `hits[50]` or `hits.meh` or `hits.count_50` - Amount of 50's
 * - `hits[0]` or `hits.miss` or `hits.count_miss` - Amount of misses
 *
 * - `mods` - Number / Name / Array of { acronym: "EZ" }
 * - `mode` - Number/Name of the gamemode
 *
 * &nbsp;
 *
 * ### Usage Example
 * ```js
 * const { tools } = require('osu-api-extended');
 *
 * function main() {
 *   try {
 *     const hits = { 300: 123, 100: 12, 50: 1, 0: 1 };
 *     const result = tools.calculate_rank(hits, 72, 'osu');
 *     if (result.error != null) {
 *       console.log(result.error);
 *       return;
 *     };
 *
 *
 *     console.log(result);
 *   } catch (error) {
 *     console.log(error);
 *   };
 * };
 *
 * main();
 * ```
 */
const calculate_rank = (hits, mods = 0, mode) => {
    if (Object.keys(hits).length == 0) {
        return (0, handleErrors_1.handleErrors)(new Error('Provide hits (300, 100, 50, etc)'));
    }
    ;
    const { name: modsName } = (0, mods_1.calculate_mods)(mods);
    const calc_acc = (0, accuracy_1.calculate_accuracy)(hits, mode);
    const accuracy = calc_acc.accuracy / 100;
    const geki = parseInt(hits.perfect || hits.count_geki || (hits === null || hits === void 0 ? void 0 : hits.geki) || '0');
    const h300 = parseInt(hits.great || hits.count_300 || (hits === null || hits === void 0 ? void 0 : hits[300]) || '0');
    const katu = parseInt(hits.small_tick_miss || hits.good || hits.count_katu || (hits === null || hits === void 0 ? void 0 : hits.katu) || '0');
    const h100 = parseInt(hits.large_tick_hit || hits.ok || hits.count_100 || (hits === null || hits === void 0 ? void 0 : hits[100]) || '0');
    const h50 = parseInt(hits.small_tick_hit || hits.meh || hits.count_50 || (hits === null || hits === void 0 ? void 0 : hits[50]) || '0');
    const h0 = parseInt(hits.miss || hits.count_miss || (hits === null || hits === void 0 ? void 0 : hits[0]) || '0');
    const is_silver = /hd|fl/i.test(modsName);
    let total = 0;
    let r300 = 0;
    let r50 = 0;
    let rank = '';
    switch (mode) {
        case 'osu':
        case enums_1.GamemodeEnum.osu:
            total = +h300 + +h100 + +h50 + +h0;
            r300 = +h300 / total;
            r50 = +h50 / total;
            if (r300 === 1)
                rank = is_silver ? 'XH' : 'X';
            else if (r300 > 0.9 && r50 < 0.01 && h0 === 0)
                rank = is_silver ? 'SH' : 'S';
            else if ((r300 > 0.8 && h0 === 0) || r300 > 0.9)
                rank = 'A';
            else if ((r300 > 0.7 && h0 === 0) || r300 > 0.8)
                rank = 'B';
            else if (r300 > 0.6)
                rank = 'C';
            else
                rank = 'D';
            break;
        case 'taiko':
        case enums_1.GamemodeEnum.taiko:
            total = +h300 + +h100 + +h50 + +h0;
            r300 = +h300 / total;
            r50 = +h50 / total;
            if (r300 === 1)
                rank = is_silver ? 'XH' : 'X';
            else if (r300 > 0.9 && r50 < 0.01 && h0 === 0)
                rank = is_silver ? 'SH' : 'S';
            else if ((r300 > 0.8 && h0 === 0) || r300 > 0.9)
                rank = 'A';
            else if ((r300 > 0.7 && h0 === 0) || r300 > 0.8)
                rank = 'B';
            else if (r300 > 0.6)
                rank = 'C';
            else
                rank = 'D';
            break;
        case 'fruits':
        case enums_1.GamemodeEnum.fruits:
            total = +h300 + +h100 + +h50 + +h0 + +katu;
            r300 = +h300 / total;
            r50 = +h50 / total;
            if (accuracy === 1)
                rank = is_silver ? 'XH' : 'X';
            else if (accuracy > 0.98)
                rank = is_silver ? 'SH' : 'S';
            else if (accuracy > 0.94)
                rank = 'A';
            else if (accuracy > 0.9)
                rank = 'B';
            else if (accuracy > 0.85)
                rank = 'C';
            else
                rank = 'D';
            break;
        case 'mania':
        case enums_1.GamemodeEnum.mania:
            total = +h300 + +h100 + +h50 + +h0 + +geki + +katu;
            r300 = +h300 / total;
            r50 = +h50 / total;
            if (accuracy === 1)
                rank = is_silver ? 'XH' : 'X';
            else if (accuracy > 0.95)
                rank = is_silver ? 'SH' : 'S';
            else if (accuracy > 0.9)
                rank = 'A';
            else if (accuracy > 0.8)
                rank = 'B';
            else if (accuracy > 0.7)
                rank = 'C';
            else
                rank = 'D';
            break;
    }
    ;
    return {
        rank,
        accuracy,
    };
};
exports.calculate_rank = calculate_rank;
