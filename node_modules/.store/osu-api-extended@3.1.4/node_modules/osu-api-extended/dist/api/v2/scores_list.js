"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.scores_list = void 0;
const request_1 = require("../../utility/request");
const handleErrors_1 = require("../../utility/handleErrors");
const scores_list = (params, addons) => __awaiter(void 0, void 0, void 0, function* () {
    const object = {};
    let url = 'https://osu.ppy.sh/api/v2';
    let method = 'GET';
    let bypass_flat = false;
    switch (params === null || params === void 0 ? void 0 : params.type) {
        case 'leaderboard':
            if (params.beatmap_id == null) {
                return (0, handleErrors_1.handleErrors)(new Error(`Specify beatmap id`));
            }
            ;
            url += `/beatmaps/${params.beatmap_id}/scores`;
            object['type'] = params.leaderboard_type;
            if ((params === null || params === void 0 ? void 0 : params.mode) != null)
                object['mode'] = params.mode;
            if (Array.isArray(params === null || params === void 0 ? void 0 : params.mods))
                object['mods[]'] = params.mods;
            break;
        case 'user_beatmap_best':
            if (params.beatmap_id == null) {
                return (0, handleErrors_1.handleErrors)(new Error(`Specify beatmap id`));
            }
            ;
            if (params.user_id == null) {
                return (0, handleErrors_1.handleErrors)(new Error(`Specify user id`));
            }
            ;
            url += `/beatmaps/${params.beatmap_id}/scores/users/${params.user_id}`;
            if ((params === null || params === void 0 ? void 0 : params.mode) != null)
                object['mode'] = params.mode;
            if (Array.isArray(params === null || params === void 0 ? void 0 : params.mods))
                object['mods[]'] = params.mods;
            break;
        case 'user_beatmap_all':
            if (params.beatmap_id == null) {
                return (0, handleErrors_1.handleErrors)(new Error(`Specify beatmap id`));
            }
            ;
            if (params.user_id == null) {
                return (0, handleErrors_1.handleErrors)(new Error(`Specify user id`));
            }
            ;
            url += `/beatmaps/${params.beatmap_id}/scores/users/${params.user_id}/all`;
            if ((params === null || params === void 0 ? void 0 : params.mode) != null)
                object['mode'] = params.mode;
            break;
        case 'user_best':
        case 'user_firsts':
        case 'user_recent':
        case 'user_pinned':
            if (params.user_id == null) {
                return (0, handleErrors_1.handleErrors)(new Error(`Specify user id`));
            }
            ;
            url += `/users/${params.user_id}/scores/${params.type.replace('user_', '')}`;
            if ((params === null || params === void 0 ? void 0 : params.mode) != null)
                object['mode'] = params.mode;
            if ((params === null || params === void 0 ? void 0 : params.limit) != null)
                object['limit'] = params.limit;
            if ((params === null || params === void 0 ? void 0 : params.offset) != null)
                object['offset'] = params.offset;
            if ((params === null || params === void 0 ? void 0 : params.include_fails) != null)
                object['include_fails'] = params.include_fails == true ? 1 : params.include_fails == false ? 0 : undefined;
            break;
        case 'latest_ranked':
            if (params.mode == null) {
                return (0, handleErrors_1.handleErrors)(new Error(`Specify gamemode`));
            }
            ;
            url += `/scores`;
            bypass_flat = true;
            if (params === null || params === void 0 ? void 0 : params.mode)
                object['ruleset'] = params.mode;
            if (params === null || params === void 0 ? void 0 : params.cursor_string)
                object['cursor_string'] = params.cursor_string;
            break;
        default:
            return (0, handleErrors_1.handleErrors)(new Error(`Unsupported type: ${params.type}`));
    }
    ;
    const data = yield (0, request_1.request)(url, {
        method: method,
        params: object,
        addons,
    });
    if (data.error)
        return (0, handleErrors_1.handleErrors)(new Error(data.error));
    if ('scores' in data && bypass_flat != true) {
        data.scores.forEach((r, index) => r.index = index);
        return data.scores;
    }
    ;
    if (params.type != 'user_beatmap_best' && Array.isArray(data))
        data.forEach((r, index) => r.index = index);
    return data;
});
exports.scores_list = scores_list;
